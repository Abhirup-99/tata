!function(e){function t(e){delete installedChunks[e]}function n(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.type="text/javascript",n.charset="utf-8",n.src=u.p+""+e+"."+v+".hot-update.js",t.appendChild(n)}function o(e){return e=e||1e4,new Promise(function(t,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var o=new XMLHttpRequest,r=u.p+""+v+".hot-update.json";o.open("GET",r,!0),o.timeout=e,o.send(null)}catch(e){return n(e)}o.onreadystatechange=function(){if(4===o.readyState)if(0===o.status)n(new Error("Manifest request to "+r+" timed out."));else if(404===o.status)t();else if(200!==o.status&&304!==o.status)n(new Error("Manifest request to "+r+" failed."));else{try{var e=JSON.parse(o.responseText)}catch(e){return void n(e)}t(e)}}})}function r(e){var t=A[e];if(!t)return u;var n=function(n){return t.hot.active?(A[n]?A[n].parents.indexOf(e)<0&&A[n].parents.push(e):(j=[e],b=n),t.children.indexOf(n)<0&&t.children.push(n)):(console.warn("[HMR] unexpected require("+n+") from disposed module "+e),j=[]),u(n)};for(var o in u)Object.prototype.hasOwnProperty.call(u,o)&&"e"!==o&&Object.defineProperty(n,o,function(e){return{configurable:!0,enumerable:!0,get:function(){return u[e]},set:function(t){u[e]=t}}}(o));return n.e=function(e){function t(){E--,"prepare"===I&&(D[e]||l(e),0===E&&0===L&&p())}return"ready"===I&&a("prepare"),E++,u.e(e).then(t,function(e){throw t(),e})},n}function i(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:b!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var o=0;o<e.length;o++)t._acceptedDependencies[e[o]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:d,apply:f,status:function(e){if(!e)return I;_.push(e)},addStatusHandler:function(e){_.push(e)},removeStatusHandler:function(e){var t=_.indexOf(e);t>=0&&_.splice(t,1)},data:k[e]};return b=void 0,t}function a(e){I=e;for(var t=0;t<_.length;t++)_[t].call(null,e)}function s(e){return+e+""===e?+e:e}function d(e){if("idle"!==I)throw new Error("check() is only allowed in idle status");return y=e,a("check"),o(w).then(function(e){if(!e)return a("idle"),null;C={},D={},S=e.c,g=e.h,a("prepare");var t=new Promise(function(e,t){h={resolve:e,reject:t}});x={};return l(0),"prepare"===I&&0===E&&0===L&&p(),t})}function c(e,t){if(S[e]&&C[e]){C[e]=!1;for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(x[n]=t[n]);0==--L&&0===E&&p()}}function l(e){S[e]?(C[e]=!0,L++,n(e)):D[e]=!0}function p(){a("ready");var e=h;if(h=null,e)if(y)Promise.resolve().then(function(){return f(y)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in x)Object.prototype.hasOwnProperty.call(x,n)&&t.push(s(n));e.resolve(t)}}function f(n){function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];e.indexOf(o)<0&&e.push(o)}}if("ready"!==I)throw new Error("apply() is only allowed in ready status");n=n||{};var r,i,d,c,l,p={},f=[],m={},b=function(){console.warn("[HMR] unexpected require("+y.moduleId+") to disposed module")};for(var h in x)if(Object.prototype.hasOwnProperty.call(x,h)){l=s(h);var y;y=x[h]?function(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var i=r.pop(),a=i.id,s=i.chain;if((c=A[a])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:a};if(c.hot._main)return{type:"unaccepted",chain:s,moduleId:a};for(var d=0;d<c.parents.length;d++){var l=c.parents[d],p=A[l];if(p){if(p.hot._declinedDependencies[a])return{type:"declined",chain:s.concat([l]),moduleId:a,parentId:l};t.indexOf(l)>=0||(p.hot._acceptedDependencies[a]?(n[l]||(n[l]=[]),o(n[l],[a])):(delete n[l],t.push(l),r.push({chain:s.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}(l):{type:"disposed",moduleId:h};var w=!1,O=!1,_=!1,L="";switch(y.chain&&(L="\nUpdate propagation: "+y.chain.join(" -> ")),y.type){case"self-declined":n.onDeclined&&n.onDeclined(y),n.ignoreDeclined||(w=new Error("Aborted because of self decline: "+y.moduleId+L));break;case"declined":n.onDeclined&&n.onDeclined(y),n.ignoreDeclined||(w=new Error("Aborted because of declined dependency: "+y.moduleId+" in "+y.parentId+L));break;case"unaccepted":n.onUnaccepted&&n.onUnaccepted(y),n.ignoreUnaccepted||(w=new Error("Aborted because "+l+" is not accepted"+L));break;case"accepted":n.onAccepted&&n.onAccepted(y),O=!0;break;case"disposed":n.onDisposed&&n.onDisposed(y),_=!0;break;default:throw new Error("Unexception type "+y.type)}if(w)return a("abort"),Promise.reject(w);if(O){m[l]=x[l],o(f,y.outdatedModules);for(l in y.outdatedDependencies)Object.prototype.hasOwnProperty.call(y.outdatedDependencies,l)&&(p[l]||(p[l]=[]),o(p[l],y.outdatedDependencies[l]))}_&&(o(f,[y.moduleId]),m[l]=b)}var E=[];for(i=0;i<f.length;i++)l=f[i],A[l]&&A[l].hot._selfAccepted&&E.push({module:l,errorHandler:A[l].hot._selfAccepted});a("dispose"),Object.keys(S).forEach(function(e){!1===S[e]&&t(e)});for(var D,C=f.slice();C.length>0;)if(l=C.pop(),c=A[l]){var R={},U=c.hot._disposeHandlers;for(d=0;d<U.length;d++)(r=U[d])(R);for(k[l]=R,c.hot.active=!1,delete A[l],delete p[l],d=0;d<c.children.length;d++){var B=A[c.children[d]];B&&((D=B.parents.indexOf(l))>=0&&B.parents.splice(D,1))}}var T,H;for(l in p)if(Object.prototype.hasOwnProperty.call(p,l)&&(c=A[l]))for(H=p[l],d=0;d<H.length;d++)T=H[d],(D=c.children.indexOf(T))>=0&&c.children.splice(D,1);a("apply"),v=g;for(l in m)Object.prototype.hasOwnProperty.call(m,l)&&(e[l]=m[l]);var M=null;for(l in p)if(Object.prototype.hasOwnProperty.call(p,l)&&(c=A[l])){H=p[l];var P=[];for(i=0;i<H.length;i++)if(T=H[i],r=c.hot._acceptedDependencies[T]){if(P.indexOf(r)>=0)continue;P.push(r)}for(i=0;i<P.length;i++){r=P[i];try{r(H)}catch(e){n.onErrored&&n.onErrored({type:"accept-errored",moduleId:l,dependencyId:H[i],error:e}),n.ignoreErrored||M||(M=e)}}}for(i=0;i<E.length;i++){var z=E[i];l=z.module,j=[l];try{u(l)}catch(e){if("function"==typeof z.errorHandler)try{z.errorHandler(e)}catch(t){n.onErrored&&n.onErrored({type:"self-accept-error-handler-errored",moduleId:l,error:t,orginalError:e,originalError:e}),n.ignoreErrored||M||(M=t),M||(M=e)}else n.onErrored&&n.onErrored({type:"self-accept-errored",moduleId:l,error:e}),n.ignoreErrored||M||(M=e)}}return M?(a("fail"),Promise.reject(M)):(a("idle"),new Promise(function(e){e(f)}))}function u(t){if(A[t])return A[t].exports;var n=A[t]={i:t,l:!1,exports:{},hot:i(t),parents:(O=j,j=[],O),children:[]};return e[t].call(n.exports,n,n.exports,r(t)),n.l=!0,n.exports}var m=this.webpackHotUpdate;this.webpackHotUpdate=function(e,t){c(e,t),m&&m(e,t)};var b,h,x,g,y=!0,v="a8e8aaf299d9609dcc50",w=1e4,k={},j=[],O=[],_=[],I="idle",L=0,E=0,D={},C={},S={},A={};u.m=e,u.c=A,u.d=function(e,t,n){u.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},u.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return u.d(t,"a",t),t},u.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},u.p="",u.h=function(){return v},r("./src/index.js")(u.s="./src/index.js")}({'./node_modules/css-loader/index.js?{"importLoaders":1}!./node_modules/postcss-loader/lib/index.js!./src/index.css':function(e,t,n){t=e.exports=n("./node_modules/css-loader/lib/css-base.js")(void 0),t.push([e.i,"*,:after,:before{-webkit-box-sizing:border-box;box-sizing:border-box}::-webkit-scrollbar{width:6px}::-webkit-scrollbar-thumb{background:#333}body{margin:0;min-height:100vh;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue;background:#f8fafe}.loading,body{display:-webkit-box;display:-ms-flexbox;display:flex;height:100%}.loading{position:fixed;top:0;left:0;width:100%;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background:#fff;z-index:999}.wrapper{-webkit-box-flex:1;-ms-flex:1 0 auto;flex:1 0 auto}.p-l-0px{padding-left:0!important}.p-t-10px{padding-top:10px!important}.m-t-15px{margin-top:15px!important}header{position:relative;width:100%;padding:40px 0;text-align:center;background-image:linear-gradient(-225deg,#2cd8d5,#6b8dd6 48%,#8e37d7)}header .title{font-size:5em;text-align:center;margin:0;margin-bottom:24px;color:#fff}header .sub-title{width:100%;font-size:20px;margin:24px 0 32px;text-align:center;color:#fff}header .github-items{position:absolute;bottom:0;left:0;width:100%;height:60px;background:#000;background:rgba(0,0,0,.1)}main{padding:20px 0}main .opts{margin-bottom:40px}main .postions{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-ms-flex-wrap:wrap;flex-wrap:wrap}main .postions label{max-width:60px;min-width:50px}main .switchs{-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}main .btns,main .switchs{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}main .btns{padding:20px 0;margin-top:11.5px;margin-bottom:40px;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}main .btns .btn{width:180px;font-size:22.4px;font-size:1.4rem;border:none;cursor:pointer;outline:none;margin-bottom:38px;color:#fff;-webkit-transition:all .2s ease;transition:all .2s ease}main .btns .btn:hover{-webkit-transform:translateY(-4px);transform:translateY(-4px)}main .btns .btn[data-type=text]{background:#000;background:rgba(0,0,0,.9)}main .btns .btn[data-type=log]{color:#333;background:#fffffc}main .btns .btn[data-type=info]{background:#2ca9e1}main .btns .btn[data-type=success]{background:#38b48b}main .btns .btn[data-type=warn]{background:#f89406}main .btns .btn[data-type=error]{background:#e9546b}@media (max-width:600px){main .postions{-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}}",""])},'./node_modules/css-loader/index.js?{"importLoaders":1}!./node_modules/postcss-loader/lib/index.js!./src/tata.css':function(e,t,n){t=e.exports=n("./node_modules/css-loader/lib/css-base.js")(void 0),t.push([e.i,".tata{position:fixed;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-pack:distribute;justify-content:space-around;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:300px;opacity:.9;border-radius:3px;color:#fff;font-size:16px;z-index:9999;pointer-events:auto;padding:12px 14px 12px 20px;-webkit-box-shadow:0 24px 38px 3px rgba(0,0,0,.14),0 9px 46px 8px rgba(0,0,0,.12),0 11px 15px -7px rgba(0,0,0,.2);box-shadow:0 24px 38px 3px rgba(0,0,0,.14),0 9px 46px 8px rgba(0,0,0,.12),0 11px 15px -7px rgba(0,0,0,.2)}.tata:hover{opacity:1}.tata *{-webkit-box-sizing:border-box;box-sizing:border-box}.tata .tata-icon{font-size:2em;color:inherit}.tata .tata-body{margin:0;padding:0 14px;min-height:38px;min-width:260px}.tata .tata-title{margin:0 0 2px;font-size:1em}.tata .tata-text{margin:0;font-size:.9em}.tata .tata-close{position:absolute;top:6px;right:6px;border:none;margin:0;padding:0;font-size:1em;font-weight:700;color:inherit;cursor:pointer;outline:none;background:transparent}.tata-progress{position:absolute;bottom:-1px;left:0;width:100%;height:5px;border-radius:0 0 3px 3px;background:#000;background:rgba(0,0,0,.2)}.tata .tata-close:hover{opacity:.4}.tata.top-right{top:12px;right:12px}.tata.top-mid{top:12px;left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%)}.tata.top-left{top:12px;left:12px}.tata.bottom-right{right:12px;bottom:18px}.tata.bottom-mid{left:50%;bottom:18px;-webkit-transform:translateX(-50%);transform:translateX(-50%)}.tata.bottom-left{bottom:18px;left:12px}.tata.mid-right{right:12px}.tata.mid-left,.tata.mid-right{top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.tata.mid-left{left:12px}.tata.mid-mid{top:35%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.tata.text{color:#fff;background:#323232}.tata.log{color:#333;background:#fffffc}.tata.info{background:#2ca9e1}.tata.warn{background:#f89406}.tata.error{background:#e9546b}.tata.success{background:#38b48b}.tata.fade-in{-webkit-animation:.4s ease-in fadeIn forwards;animation:.4s ease-in fadeIn forwards}.tata.fade-out{-webkit-animation:.4s linear fadeOut forwards;animation:.4s linear fadeOut forwards}.tata.slide-right-in{-webkit-animation:.4s ease slideRightIn forwards;animation:.4s ease slideRightIn forwards}.tata.slide-right-out{-webkit-animation:.4s ease slideRightOut forwards;animation:.4s ease slideRightOut forwards}.tata.slide-left-in{-webkit-animation:.4s ease slideLeftIn forwards;animation:.4s ease slideLeftIn forwards}.tata.slide-left-out{-webkit-animation:.4s ease slideLeftOut forwards;animation:.4s ease slideLeftOut forwards}.tata.slide-top-in{-webkit-animation:.4s ease slideTopIn forwards;animation:.4s ease slideTopIn forwards}.tata.slide-top-out{-webkit-animation:.4s ease slideTopOut forwards;animation:.4s ease slideTopOut forwards}.tata.slide-bottom-in{-webkit-animation:.4s ease slideBottomIn forwards;animation:.4s ease slideBottomIn forwards}.tata.slide-bottom-out{-webkit-animation:.4s ease slideBottomOut forwards;animation:.4s ease slideBottomOut forwards}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:.9}}@keyframes fadeIn{0%{opacity:0}to{opacity:.9}}@-webkit-keyframes fadeOut{0%{opacity:.9}to{opacity:0}}@keyframes fadeOut{0%{opacity:.9}to{opacity:0}}@-webkit-keyframes slideRightIn{0%{right:-310px}to{right:12px}}@keyframes slideRightIn{0%{right:-310px}to{right:12px}}@-webkit-keyframes slideRightOut{0%{right:12px}to{right:-310px}}@keyframes slideRightOut{0%{right:12px}to{right:-310px}}@-webkit-keyframes slideLeftIn{0%{left:-310px}to{left:12px}}@keyframes slideLeftIn{0%{left:-310px}to{left:12px}}@-webkit-keyframes slideLeftOut{0%{left:12px}to{left:-310px}}@keyframes slideLeftOut{0%{left:12px}to{left:-310px}}@-webkit-keyframes slideTopIn{0%{top:calc(-100% + -12px)}to{top:12px}}@keyframes slideTopIn{0%{top:calc(-100% + -12px)}to{top:12px}}@-webkit-keyframes slideTopOut{0%{top:12px}to{top:calc(-100% + -12px)}}@keyframes slideTopOut{0%{top:12px}to{top:calc(-100% + -12px)}}@-webkit-keyframes slideBottomIn{0%{bottom:calc(-100% + -18px)}to{bottom:18px}}@keyframes slideBottomIn{0%{bottom:calc(-100% + -18px)}to{bottom:18px}}@-webkit-keyframes slideBottomOut{0%{bottom:18px}to{bottom:calc(-100% + -18px)}}@keyframes slideBottomOut{0%{bottom:18px}to{bottom:calc(-100% + -18px)}}@-webkit-keyframes reduceWidth{0%{width:100%}to{width:0}}@keyframes reduceWidth{0%{width:100%}to{width:0}}",""])},"./node_modules/css-loader/lib/css-base.js":function(e,t){function n(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=o(r);return[n].concat(r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"})).concat([i]).join("\n")}return[n].join("\n")}function o(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var o=n(t,e);return t[2]?"@media "+t[2]+"{"+o+"}":o}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var o={},r=0;r<this.length;r++){var i=this[r][0];"number"==typeof i&&(o[i]=!0)}for(r=0;r<e.length;r++){var a=e[r];"number"==typeof a[0]&&o[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},"./node_modules/style-loader/lib/addStyles.js":function(e,t,n){function o(e,t){for(var n=0;n<e.length;n++){var o=e[n],r=m[o.id];if(r){r.refs++;for(var i=0;i<r.parts.length;i++)r.parts[i](o.parts[i]);for(;i<o.parts.length;i++)r.parts.push(l(o.parts[i],t))}else{for(var a=[],i=0;i<o.parts.length;i++)a.push(l(o.parts[i],t));m[o.id]={id:o.id,refs:1,parts:a}}}}function r(e,t){for(var n=[],o={},r=0;r<e.length;r++){var i=e[r],a=t.base?i[0]+t.base:i[0],s=i[1],d=i[2],c=i[3],l={css:s,media:d,sourceMap:c};o[a]?o[a].parts.push(l):n.push(o[a]={id:a,parts:[l]})}return n}function i(e,t){var n=h(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=y[y.length-1];if("top"===e.insertAt)o?o.nextSibling?n.insertBefore(t,o.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),y.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=h(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,r)}}function a(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=y.indexOf(e);t>=0&&y.splice(t,1)}function s(e){var t=document.createElement("style");return e.attrs.type="text/css",c(t,e.attrs),i(e,t),t}function d(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",c(t,e.attrs),i(e,t),t}function c(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function l(e,t){var n,o,r,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var c=g++;n=x||(x=s(t)),o=p.bind(null,n,c,!1),r=p.bind(null,n,c,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=d(t),o=u.bind(null,n,t),r=function(){a(n),n.href&&URL.revokeObjectURL(n.href)}):(n=s(t),o=f.bind(null,n),r=function(){a(n)});return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}function p(e,t,n,o){var r=n?"":o.css;if(e.styleSheet)e.styleSheet.cssText=w(t,r);else{var i=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function f(e,t){var n=t.css,o=t.media;if(o&&e.setAttribute("media",o),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function u(e,t,n){var o=n.css,r=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&r;(t.convertToAbsoluteUrls||i)&&(o=v(o)),r&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var a=new Blob([o],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}var m={},b=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),h=function(e){var t={};return function(n){if(void 0===t[n]){var o=e.call(this,n);if(o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(e){o=null}t[n]=o}return t[n]}}(function(e){return document.querySelector(e)}),x=null,g=0,y=[],v=n("./node_modules/style-loader/lib/urls.js");e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");t=t||{},t.attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||(t.singleton=b()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=r(e,t);return o(n,t),function(e){for(var i=[],a=0;a<n.length;a++){var s=n[a],d=m[s.id];d.refs--,i.push(d)}if(e){o(r(e,t),t)}for(var a=0;a<i.length;a++){var d=i[a];if(0===d.refs){for(var c=0;c<d.parts.length;c++)d.parts[c]();delete m[d.id]}}}};var w=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}()},"./node_modules/style-loader/lib/urls.js":function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,o=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var r=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});if(/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(r))return e;var i;return i=0===r.indexOf("//")?r:0===r.indexOf("/")?n+r:o+r.replace(/^\.\//,""),"url("+JSON.stringify(i)+")"})}},"./src/index.css":function(e,t,n){var o=n('./node_modules/css-loader/index.js?{"importLoaders":1}!./node_modules/postcss-loader/lib/index.js!./src/index.css');"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0};r.transform=void 0;var i=n("./node_modules/style-loader/lib/addStyles.js")(o,r);o.locals&&(e.exports=o.locals),o.locals||e.hot.accept('./node_modules/css-loader/index.js?{"importLoaders":1}!./node_modules/postcss-loader/lib/index.js!./src/index.css',function(){var t=n('./node_modules/css-loader/index.js?{"importLoaders":1}!./node_modules/postcss-loader/lib/index.js!./src/index.css');"string"==typeof t&&(t=[[e.i,t,""]]),i(t)}),e.hot.dispose(function(){i()})},"./src/index.js":function(e,t,n){"use strict";function o(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function r(e){return document.querySelector(e)}function i(e){return document.querySelectorAll(e)}function a(){alert("clicked.")}function s(){alert("closed.")}n("./src/index.css");var d=n("./src/tata.js"),c=function(e){return e&&e.__esModule?e:{default:e}}(d);document.addEventListener("readystatechange",function(){if("complete"===document.readyState){var e=r(".loading"),t=r(".btns");e.remove?e.remove():document.body.removeChild(e),t.addEventListener("click",function(e){var t=e.target,n=t.dataset.type;if(n){var d=r("#title").value,l=r("#text").value,p=[].concat(o(i("input[name=position]"))).find(function(e){return e.checked}).value;c.default[n](d,l,{duration:1e3*r("#duration").value,position:p,progress:r("input[name=progress]").checked,holding:r("input[name=holding]").checked,animate:r("input[name=animate]").checked?"slide":"fade",closeBtn:r("input[name=closeBtn]").checked,onClick:r("input[name=onClick]").checked?a:null,onClose:r("input[name=onClose]").checked?s:null})}})}})},"./src/tata.css":function(e,t,n){var o=n('./node_modules/css-loader/index.js?{"importLoaders":1}!./node_modules/postcss-loader/lib/index.js!./src/tata.css');"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0};r.transform=void 0;var i=n("./node_modules/style-loader/lib/addStyles.js")(o,r);o.locals&&(e.exports=o.locals),o.locals||e.hot.accept('./node_modules/css-loader/index.js?{"importLoaders":1}!./node_modules/postcss-loader/lib/index.js!./src/tata.css',function(){var t=n('./node_modules/css-loader/index.js?{"importLoaders":1}!./node_modules/postcss-loader/lib/index.js!./src/tata.css');"string"==typeof t&&(t=[[e.i,t,""]]),i(t)}),e.hot.dispose(function(){i()})},"./src/tata.js":function(e,t,n){"use strict";function o(){switch(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"tr"){case"tr":return"top-right";case"tm":return"top-mid";case"tl":return"top-left";case"mr":return"mid-right";case"mm":return"mid-mid";case"ml":return"mid-left";case"br":return"bottom-right";case"bm":return"bottom-mid";case"bl":return"bottom-left";default:return"top-right"}}function r(){switch(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"text"){case"text":return"chat_bubble";case"log":return"textsms";case"info":return"forum";case"warn":return"info_outline";case"success":return"check";case"error":return"block";default:return""}}function i(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"fade",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"tr";if("slide"===e)switch(t){case"tr":case"mr":case"br":return"slide-right-in";case"tl":case"ml":case"bl":return"slide-left-in";case"tm":return"slide-top-in";case"bm":return"slide-bottom-in"}return"fade-in"}function a(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"fade",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"tr";if("slide"===e)switch(t){case"tr":case"mr":case"br":return"slide-right-out";case"tl":case"ml":case"bl":return"slide-left-out";case"tm":return"slide-top-out";case"bm":return"slide-bottom-out"}return"fade-out"}function s(){return"tata-"+Date.now()}function d(e){e.target.classList.contains("tata-close")||this.opts.onClick.call(this)}function c(e){var t=e.target;if(t.classList.contains("tata-close")){var n=t.parentNode.getAttribute("id"),o=m.find(function(e){return e.id===n}),r=document.getElementById(n);console.log(a(o.opts.animate,o.opts.position)),r.classList.add(a(o.opts.animate,o.opts.position)),l(r),!!o.opts.onClose&&"function"==typeof o.opts.onClose&&o.opts.onClose.call(o)}}function l(e){var t=setTimeout(function(){"function"==typeof e.remove?e.remove():document.body.removeChild(e),clearTimeout(t)},800)}function p(e,t,n){var c=r(n.type),p=o(n.position),f=i(n.animate,n.position),u=s(),b={title:e,text:t,opts:n,id:u},h=m.findIndex(function(e){return e.id===u}),x=0===h?null:m[h-1];m.push(b);var g='\n    <div class="tata '+n.type+" "+f+" "+p+'" id='+u+'>\n      <i class="tata-icon material-icons">'+c+'</i>\n      <div class="tata-body">\n        <h4 class="tata-title">'+e+'</h4>\n        <p class="tata-text">'+t+"</p>\n      </div>\n      "+(n.closeBtn?'<button class="tata-close material-icons">clear</button>':"")+"\n      "+(!n.holding&&n.progress?'<div class="tata-progress"></div>':"")+"\n    </div>\n  ";document.body.insertAdjacentHTML("beforeend",g),x&&x.opts.position===b.opts.position&&l(document.getElementById(x.id));var y=document.getElementById(u);if(!!n.onClick&&"function"==typeof n.onClick&&y.addEventListener("click",d.bind(b),{capture:!0,once:!0}),console.log(performance.now()),!n.holding&&n.progress){y.querySelector(".tata-progress").style.animation=n.duration/1e3+"s reduceWidth linear forwards";setTimeout(function(){var e=m.findIndex(function(e){return e===e});m.splice(e,1),console.log(a(b.opts.animate,b.opts.position)),y.classList.add(a(b.opts.animate,b.opts.position)),console.log(performance.now()),l(y),!!b.opts.onClose&&"function"==typeof b.opts.onClose&&b.opts.onClose.call(b)},n.duration)}}n("./src/tata.css");var f=document.createElement("link");f.rel="stylesheet",f.href="https://fonts.googleapis.com/icon?family=Material+Icons",document.head.appendChild(f);var u={type:"log",position:"tr",animate:"fade",duration:3e3,progress:!0,holding:!1,closeBtn:!0,onClick:null,onClose:null},m=[],b={text:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"你好",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"你好, 今天是"+(new Date).toLocaleString(),n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};p(e,t,Object.assign({},u,n,{type:"text"}))},log:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"你好",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"今天是"+(new Date).toLocaleString(),n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};p(e,t,Object.assign({},u,n,{type:"log"}))},info:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"你好",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"今天是"+(new Date).toLocaleString(),n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};p(e,t,Object.assign({},u,n,{type:"info"}))},warn:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"你好",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"今天是"+(new Date).toLocaleString(),n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};p(e,t,Object.assign({},u,n,{type:"warn"}))},error:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"你好",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"今天是"+(new Date).toLocaleString(),n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};p(e,t,Object.assign({},u,n,{type:"error"}))},success:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"你好",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"今天是"+(new Date).toLocaleString(),n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};p(e,t,Object.assign({},u,n,{type:"success"}))},clear:function(){m.forEach(function(e){l(document.getElementById(e.id))}),m.length=0}};document.addEventListener("click",c,!1),e.exports=b}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,