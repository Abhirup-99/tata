!function(e){function n(e){delete installedChunks[e]}function t(e){var n=document.getElementsByTagName("head")[0],t=document.createElement("script");t.type="text/javascript",t.charset="utf-8",t.src=p.p+""+e+"."+x+".hot-update.js",n.appendChild(t)}function r(e){return e=e||1e4,new Promise(function(n,t){if("undefined"==typeof XMLHttpRequest)return t(new Error("No browser support"));try{var r=new XMLHttpRequest,o=p.p+""+x+".hot-update.json";r.open("GET",o,!0),r.timeout=e,r.send(null)}catch(e){return t(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)t(new Error("Manifest request to "+o+" timed out."));else if(404===r.status)n();else if(200!==r.status&&304!==r.status)t(new Error("Manifest request to "+o+" failed."));else{try{var e=JSON.parse(r.responseText)}catch(e){return void t(e)}n(e)}}})}function o(e){var n=R[e];if(!n)return p;var t=function(t){return n.hot.active?(R[t]?R[t].parents.indexOf(e)<0&&R[t].parents.push(e):(j=[e],h=t),n.children.indexOf(t)<0&&n.children.push(t)):(console.warn("[HMR] unexpected require("+t+") from disposed module "+e),j=[]),p(t)};for(var r in p)Object.prototype.hasOwnProperty.call(p,r)&&"e"!==r&&Object.defineProperty(t,r,function(e){return{configurable:!0,enumerable:!0,get:function(){return p[e]},set:function(n){p[e]=n}}}(r));return t.e=function(e){function n(){S--,"prepare"===L&&(U[e]||d(e),0===S&&0===E&&f())}return"ready"===L&&a("prepare"),S++,p.e(e).then(n,function(e){throw n(),e})},t}function i(e){var n={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:h!==e,active:!0,accept:function(e,t){if(void 0===e)n._selfAccepted=!0;else if("function"==typeof e)n._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)n._acceptedDependencies[e[r]]=t||function(){};else n._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)n._selfDeclined=!0;else if("object"==typeof e)for(var t=0;t<e.length;t++)n._declinedDependencies[e[t]]=!0;else n._declinedDependencies[e]=!0},dispose:function(e){n._disposeHandlers.push(e)},addDisposeHandler:function(e){n._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=n._disposeHandlers.indexOf(e);t>=0&&n._disposeHandlers.splice(t,1)},check:c,apply:u,status:function(e){if(!e)return L;I.push(e)},addStatusHandler:function(e){I.push(e)},removeStatusHandler:function(e){var n=I.indexOf(e);n>=0&&I.splice(n,1)},data:k[e]};return h=void 0,n}function a(e){L=e;for(var n=0;n<I.length;n++)I[n].call(null,e)}function s(e){return+e+""===e?+e:e}function c(e){if("idle"!==L)throw new Error("check() is only allowed in idle status");return y=e,a("check"),r(w).then(function(e){if(!e)return a("idle"),null;_={},U={},C=e.c,v=e.h,a("prepare");var n=new Promise(function(e,n){b={resolve:e,reject:n}});g={};return d(0),"prepare"===L&&0===S&&0===E&&f(),n})}function l(e,n){if(C[e]&&_[e]){_[e]=!1;for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(g[t]=n[t]);0==--E&&0===S&&f()}}function d(e){C[e]?(_[e]=!0,E++,t(e)):U[e]=!0}function f(){a("ready");var e=b;if(b=null,e)if(y)Promise.resolve().then(function(){return u(y)}).then(function(n){e.resolve(n)},function(n){e.reject(n)});else{var n=[];for(var t in g)Object.prototype.hasOwnProperty.call(g,t)&&n.push(s(t));e.resolve(n)}}function u(t){function r(e,n){for(var t=0;t<n.length;t++){var r=n[t];e.indexOf(r)<0&&e.push(r)}}if("ready"!==L)throw new Error("apply() is only allowed in ready status");t=t||{};var o,i,c,l,d,f={},u=[],m={},h=function(){console.warn("[HMR] unexpected require("+y.moduleId+") to disposed module")};for(var b in g)if(Object.prototype.hasOwnProperty.call(g,b)){d=s(b);var y;y=g[b]?function(e){for(var n=[e],t={},o=n.slice().map(function(e){return{chain:[e],id:e}});o.length>0;){var i=o.pop(),a=i.id,s=i.chain;if((l=R[a])&&!l.hot._selfAccepted){if(l.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:a};if(l.hot._main)return{type:"unaccepted",chain:s,moduleId:a};for(var c=0;c<l.parents.length;c++){var d=l.parents[c],f=R[d];if(f){if(f.hot._declinedDependencies[a])return{type:"declined",chain:s.concat([d]),moduleId:a,parentId:d};n.indexOf(d)>=0||(f.hot._acceptedDependencies[a]?(t[d]||(t[d]=[]),r(t[d],[a])):(delete t[d],n.push(d),o.push({chain:s.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:e,outdatedModules:n,outdatedDependencies:t}}(d):{type:"disposed",moduleId:b};var w=!1,O=!1,I=!1,E="";switch(y.chain&&(E="\nUpdate propagation: "+y.chain.join(" -> ")),y.type){case"self-declined":t.onDeclined&&t.onDeclined(y),t.ignoreDeclined||(w=new Error("Aborted because of self decline: "+y.moduleId+E));break;case"declined":t.onDeclined&&t.onDeclined(y),t.ignoreDeclined||(w=new Error("Aborted because of declined dependency: "+y.moduleId+" in "+y.parentId+E));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(y),t.ignoreUnaccepted||(w=new Error("Aborted because "+d+" is not accepted"+E));break;case"accepted":t.onAccepted&&t.onAccepted(y),O=!0;break;case"disposed":t.onDisposed&&t.onDisposed(y),I=!0;break;default:throw new Error("Unexception type "+y.type)}if(w)return a("abort"),Promise.reject(w);if(O){m[d]=g[d],r(u,y.outdatedModules);for(d in y.outdatedDependencies)Object.prototype.hasOwnProperty.call(y.outdatedDependencies,d)&&(f[d]||(f[d]=[]),r(f[d],y.outdatedDependencies[d]))}I&&(r(u,[y.moduleId]),m[d]=h)}var S=[];for(i=0;i<u.length;i++)d=u[i],R[d]&&R[d].hot._selfAccepted&&S.push({module:d,errorHandler:R[d].hot._selfAccepted});a("dispose"),Object.keys(C).forEach(function(e){!1===C[e]&&n(e)});for(var U,_=u.slice();_.length>0;)if(d=_.pop(),l=R[d]){var A={},D=l.hot._disposeHandlers;for(c=0;c<D.length;c++)(o=D[c])(A);for(k[d]=A,l.hot.active=!1,delete R[d],delete f[d],c=0;c<l.children.length;c++){var B=R[l.children[c]];B&&((U=B.parents.indexOf(d))>=0&&B.parents.splice(U,1))}}var T,M;for(d in f)if(Object.prototype.hasOwnProperty.call(f,d)&&(l=R[d]))for(M=f[d],c=0;c<M.length;c++)T=M[c],(U=l.children.indexOf(T))>=0&&l.children.splice(U,1);a("apply"),x=v;for(d in m)Object.prototype.hasOwnProperty.call(m,d)&&(e[d]=m[d]);var H=null;for(d in f)if(Object.prototype.hasOwnProperty.call(f,d)&&(l=R[d])){M=f[d];var q=[];for(i=0;i<M.length;i++)if(T=M[i],o=l.hot._acceptedDependencies[T]){if(q.indexOf(o)>=0)continue;q.push(o)}for(i=0;i<q.length;i++){o=q[i];try{o(M)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:d,dependencyId:M[i],error:e}),t.ignoreErrored||H||(H=e)}}}for(i=0;i<S.length;i++){var N=S[i];d=N.module,j=[d];try{p(d)}catch(e){if("function"==typeof N.errorHandler)try{N.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:d,error:n,orginalError:e,originalError:e}),t.ignoreErrored||H||(H=n),H||(H=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:d,error:e}),t.ignoreErrored||H||(H=e)}}return H?(a("fail"),Promise.reject(H)):(a("idle"),new Promise(function(e){e(u)}))}function p(n){if(R[n])return R[n].exports;var t=R[n]={i:n,l:!1,exports:{},hot:i(n),parents:(O=j,j=[],O),children:[]};return e[n].call(t.exports,t,t.exports,o(n)),t.l=!0,t.exports}var m=this.webpackHotUpdate;this.webpackHotUpdate=function(e,n){l(e,n),m&&m(e,n)};var h,b,g,v,y=!0,x="604d66fb63edbce154f8",w=1e4,k={},j=[],O=[],I=[],L="idle",E=0,S=0,U={},_={},C={},R={};p.m=e,p.c=R,p.d=function(e,n,t){p.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:t})},p.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return p.d(n,"a",n),n},p.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},p.p="",p.h=function(){return x},o("./src/index.js")(p.s="./src/index.js")}({"./dist/tata.js":function(e,n,t){!function(n,t){e.exports=t()}(0,function(){return function(e){function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}var t={};return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},n.p="",n(n.s=0)}([function(e,n,t){"use strict";function r(){switch(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"tr"){case"tr":return"top-right";case"tm":return"top-mid";case"tl":return"top-left";case"mr":return"mid-right";case"mm":return"mid-mid";case"ml":return"mid-left";case"br":return"bottom-right";case"bm":return"bottom-mid";case"bl":return"bottom-left";default:return"top-right"}}function o(){switch(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"text"){case"text":return"chat_bubble";case"log":return"textsms";case"info":return"forum";case"warn":return"info_outline";case"success":return"check";case"error":return"block";default:return""}}function i(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"fade",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"tr";if("slide"===e)switch(n){case"tr":case"mr":case"br":return"slide-right-in";case"tl":case"ml":case"bl":return"slide-left-in";case"tm":return"slide-top-in";case"bm":return"slide-bottom-in"}return"fade-in"}function a(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"fade",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"tr";if("slide"===e)switch(n){case"tr":case"mr":case"br":return"slide-right-out";case"tl":case"ml":case"bl":return"slide-left-out";case"tm":return"slide-top-out";case"bm":return"slide-bottom-out"}return"fade-out"}function s(){return"tata-"+Date.now()}function c(e){e.target.classList.contains("tata-close")||this.opts.onClick.call(this)}function l(e){var n=e.target;if(n.classList.contains("tata-close")){var t=n.parentNode.getAttribute("id"),r=m.find(function(e){return e.id===t}),o=document.getElementById(t);console.log(a(r.opts.animate,r.opts.position)),o.classList.add(a(r.opts.animate,r.opts.position)),d(o),!!r.opts.onClose&&"function"==typeof r.opts.onClose&&r.opts.onClose.call(r)}}function d(e){var n=setTimeout(function(){"function"==typeof e.remove?e.remove():document.body.removeChild(e),clearTimeout(n)},800)}function f(e,n,t){var l=o(t.type),f=r(t.position),u=i(t.animate,t.position),p=s(),h={title:e,text:n,opts:t,id:p},b=m.findIndex(function(e){return e.id===p}),g=0===b?null:m[b-1];m.push(h);var v='\n    <div class="tata '+t.type+" "+u+" "+f+'" id='+p+'>\n      <i class="tata-icon material-icons">'+l+'</i>\n      <div class="tata-body">\n        <h4 class="tata-title">'+e+'</h4>\n        <p class="tata-text">'+n+"</p>\n      </div>\n      "+(t.closeBtn?'<button class="tata-close material-icons">clear</button>':"")+"\n      "+(!t.holding&&t.progress?'<div class="tata-progress"></div>':"")+"\n    </div>\n  ";document.body.insertAdjacentHTML("beforeend",v),g&&g.opts.position===h.opts.position&&d(document.getElementById(g.id));var y=document.getElementById(p);!!t.onClick&&"function"==typeof t.onClick&&y.addEventListener("click",c.bind(h),{capture:!0,once:!0}),console.log(performance.now()),!t.holding&&t.progress&&(y.querySelector(".tata-progress").style.animation=t.duration/1e3+"s reduceWidth linear forwards",setTimeout(function(){var e=m.findIndex(function(e){return e===e});m.splice(e,1),console.log(a(h.opts.animate,h.opts.position)),y.classList.add(a(h.opts.animate,h.opts.position)),console.log(performance.now()),d(y),!!h.opts.onClose&&"function"==typeof h.opts.onClose&&h.opts.onClose.call(h)},t.duration))}t(1);var u=document.createElement("link");u.href="https://fonts.googleapis.com/icon?family=Material+Icons",u.rel="stylesheet",document.head.appendChild(u);var p={type:"log",position:"tr",animate:"fade",duration:3e3,progress:!0,holding:!1,closeBtn:!0,onClick:null,onClose:null},m=[],h={text:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"你好",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"你好, 今天是"+(new Date).toLocaleString(),t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};f(e,n,Object.assign({},p,t,{type:"text"}))},log:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"你好",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"今天是"+(new Date).toLocaleString(),t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};f(e,n,Object.assign({},p,t,{type:"log"}))},info:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"你好",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"今天是"+(new Date).toLocaleString(),t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};f(e,n,Object.assign({},p,t,{type:"info"}))},warn:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"你好",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"今天是"+(new Date).toLocaleString(),t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};f(e,n,Object.assign({},p,t,{type:"warn"}))},error:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"你好",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"今天是"+(new Date).toLocaleString(),t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};f(e,n,Object.assign({},p,t,{type:"error"}))},success:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"你好",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"今天是"+(new Date).toLocaleString(),t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};f(e,n,Object.assign({},p,t,{type:"success"}))},clear:function(){m.forEach(function(e){d(document.getElementById(e.id))}),m.length=0}};document.addEventListener("click",l,!1),e.exports=h},function(e,n,t){var r=t(2);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0};o.transform=void 0,t(4)(r,o),r.locals&&(e.exports=r.locals)},function(e,n,t){n=e.exports=t(3)(void 0),n.push([e.i,".tata {\n  position: fixed;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-pack: distribute;\n      justify-content: space-around;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  width: 300px;\n  opacity: .9;\n  border-radius: 3px;\n  pointer-events: auto;\n  padding: 12px 14px 12px 20px;\n  color: #ffffff;\n  z-index: 9999;\n  -webkit-box-shadow: 0 24px 38px 3px rgba(0, 0, 0, .14), 0 9px 46px 8px rgba(0, 0, 0, .12), 0 11px 15px -7px rgba(0, 0, 0, .2);\n          box-shadow: 0 24px 38px 3px rgba(0, 0, 0, .14), 0 9px 46px 8px rgba(0, 0, 0, .12), 0 11px 15px -7px rgba(0, 0, 0, .2);\n}\n\n.tata:hover {\n  opacity: 1;\n}\n\n.tata * {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n\n.tata .tata-icon {\n  font-size: 2em;\n  color: inherit;\n}\n\n.tata .tata-body {\n  margin: 0;\n  padding: 0 14px;\n  min-height: 38px;\n  min-width: 260px;\n}\n\n.tata .tata-title {\n  margin: 0 0 2px 0;\n  font-size: 16px;\n  font-size: 1rem;\n}\n\n.tata .tata-text {\n  margin: 0;\n  font-size: 14.4px;\n  font-size: .9rem;\n}\n\n.tata .tata-close {\n  position: absolute;\n  top: 6px;\n  right: 6px;\n  border: none;\n  margin: 0;\n  padding: 0;\n  font-size: 16px;\n  font-size: 1rem;\n  font-weight: bold;\n  color: inherit;\n  cursor: pointer;\n  outline: none;\n  background: transparent;\n}\n\n.tata-progress {\n  position: absolute;\n  bottom: -1px;\n  left: 0;\n  width: 100%;\n  height: 5px;\n  border-radius: 0 0 3px 3px;\n  background: #000000;\n  background: rgba(0, 0, 0, .2);\n}\n\n.tata .tata-close:hover {\n  opacity: 0.4;\n}\n\n.tata.top-right {\n  top: 12px;\n  right: 12px;\n}\n\n.tata.top-mid {\n  top: 12px;\n  left: 50%;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n}\n\n.tata.top-left {\n  top: 12px;\n  left: 12px;\n}\n\n.tata.bottom-right {\n  right: 12px;\n  bottom: 18px;\n}\n\n.tata.bottom-mid {\n  left: 50%;\n  bottom: 18px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n}\n\n.tata.bottom-left {\n  bottom: 18px;\n  left: 12px;\n}\n\n.tata.mid-right {\n  top: 50%;\n  right: 12px;\n  -webkit-transform: translateY(-50%);\n          transform: translateY(-50%);\n}\n\n.tata.mid-left {\n  top: 50%;\n  left: 12px;\n  -webkit-transform: translateY(-50%);\n          transform: translateY(-50%);\n}\n\n.tata.mid-mid {\n  top: 35%;\n  left: 50%;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n}\n\n.tata.text {\n  color: #fff;\n  background: #323232;\n}\n\n.tata.log {\n  color: #333333;\n  background: #fffffc;\n}\n\n.tata.info {\n  background: #2ca9e1;\n}\n\n.tata.warn {\n  background: #f89406;\n}\n\n.tata.error {\n  background: #e9546b;\n}\n\n.tata.success {\n  background: #38b48b;\n}\n\n.tata.fade-in {\n  -webkit-animation: .4s ease-in fadeIn forwards;\n          animation: .4s ease-in fadeIn forwards;\n}\n\n.tata.fade-out {\n  -webkit-animation: .4s linear fadeOut forwards;\n          animation: .4s linear fadeOut forwards;\n}\n\n.tata.slide-right-in {\n  -webkit-animation: .4s ease slideRightIn forwards;\n          animation: .4s ease slideRightIn forwards;\n}\n\n.tata.slide-right-out {\n  -webkit-animation: .4s ease slideRightOut forwards;\n          animation: .4s ease slideRightOut forwards;\n}\n\n.tata.slide-left-in {\n  -webkit-animation: .4s ease slideLeftIn forwards;\n          animation: .4s ease slideLeftIn forwards;\n}\n\n.tata.slide-left-out {\n  -webkit-animation: .4s ease slideLeftOut forwards;\n          animation: .4s ease slideLeftOut forwards;\n}\n\n.tata.slide-top-in {\n  -webkit-animation: .4s ease slideTopIn forwards;\n          animation: .4s ease slideTopIn forwards;\n}\n\n.tata.slide-top-out {\n  -webkit-animation: .4s ease slideTopOut forwards;\n          animation: .4s ease slideTopOut forwards;\n}\n\n.tata.slide-bottom-in {\n  -webkit-animation: .4s ease slideBottomIn forwards;\n          animation: .4s ease slideBottomIn forwards;\n}\n\n.tata.slide-bottom-out {\n  -webkit-animation: .4s ease slideBottomOut forwards;\n          animation: .4s ease slideBottomOut forwards;\n}\n\n@-webkit-keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: .9;\n  }\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: .9;\n  }\n}\n\n@-webkit-keyframes fadeOut {\n  from {\n    opacity: .9;\n  }\n\n  to {\n    opacity: 0;\n  }\n}\n\n@keyframes fadeOut {\n  from {\n    opacity: .9;\n  }\n\n  to {\n    opacity: 0;\n  }\n}\n\n@-webkit-keyframes slideRightIn {\n  from {\n    right: -310px;\n  }\n\n  to {\n    right: 12px;\n  }\n}\n\n@keyframes slideRightIn {\n  from {\n    right: -310px;\n  }\n\n  to {\n    right: 12px;\n  }\n}\n\n@-webkit-keyframes slideRightOut {\n  from {\n    right: 12px;\n  }\n\n  to {\n    right: -310px;\n  }\n}\n\n@keyframes slideRightOut {\n  from {\n    right: 12px;\n  }\n\n  to {\n    right: -310px;\n  }\n}\n\n@-webkit-keyframes slideLeftIn {\n  from {\n    left: -310px;\n  }\n\n  to {\n    left: 12px;\n  }\n}\n\n@keyframes slideLeftIn {\n  from {\n    left: -310px;\n  }\n\n  to {\n    left: 12px;\n  }\n}\n\n@-webkit-keyframes slideLeftOut {\n  from {\n    left: 12px;\n  }\n\n  to {\n    left: -310px;\n  }\n}\n\n@keyframes slideLeftOut {\n  from {\n    left: 12px;\n  }\n\n  to {\n    left: -310px;\n  }\n}\n\n@-webkit-keyframes slideTopIn {\n  from {\n    top: calc(-100% + -12px);\n  }\n  to {\n    top: 12px;\n  }\n}\n\n@keyframes slideTopIn {\n  from {\n    top: calc(-100% + -12px);\n  }\n  to {\n    top: 12px;\n  }\n}\n\n@-webkit-keyframes slideTopOut {\n  from {\n    top: 12px;\n  }\n  to {\n    top: calc(-100% + -12px);\n  }\n}\n\n@keyframes slideTopOut {\n  from {\n    top: 12px;\n  }\n  to {\n    top: calc(-100% + -12px);\n  }\n}\n\n@-webkit-keyframes slideBottomIn {\n  from {\n    bottom: calc(-100% + -18px);\n  }\n  to {\n    bottom: 18px;\n  }\n}\n\n@keyframes slideBottomIn {\n  from {\n    bottom: calc(-100% + -18px);\n  }\n  to {\n    bottom: 18px;\n  }\n}\n\n@-webkit-keyframes slideBottomOut {\n  from {\n    bottom: 18px;\n  }\n  to {\n    bottom: calc(-100% + -18px);\n  }\n}\n\n@keyframes slideBottomOut {\n  from {\n    bottom: 18px;\n  }\n  to {\n    bottom: calc(-100% + -18px);\n  }\n}\n\n@-webkit-keyframes reduceWidth {\n  from {\n    width: 100%;\n  }\n\n  to {\n    width: 0%;\n  }\n}\n\n@keyframes reduceWidth {\n  from {\n    width: 100%;\n  }\n\n  to {\n    width: 0%;\n  }\n}",""])},function(e,n){function t(e,n){var t=e[1]||"",o=e[3];if(!o)return t;if(n&&"function"==typeof btoa){var i=r(o);return[t].concat(o.sources.map(function(e){return"/*# sourceURL="+o.sourceRoot+e+" */"})).concat([i]).join("\n")}return[t].join("\n")}function r(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}e.exports=function(e){var n=[];return n.toString=function(){return this.map(function(n){var r=t(n,e);return n[2]?"@media "+n[2]+"{"+r+"}":r}).join("")},n.i=function(e,t){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(t&&!a[2]?a[2]=t:t&&(a[2]="("+a[2]+") and ("+t+")"),n.push(a))}},n}},function(e,n,t){function r(e,n){for(var t=0;t<e.length;t++){var r=e[t],o=m[r.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](r.parts[i]);for(;i<r.parts.length;i++)o.parts.push(d(r.parts[i],n))}else{for(var a=[],i=0;i<r.parts.length;i++)a.push(d(r.parts[i],n));m[r.id]={id:r.id,refs:1,parts:a}}}}function o(e,n){for(var t=[],r={},o=0;o<e.length;o++){var i=e[o],a=n.base?i[0]+n.base:i[0],s=i[1],c=i[2],l=i[3],d={css:s,media:c,sourceMap:l};r[a]?r[a].parts.push(d):t.push(r[a]={id:a,parts:[d]})}return t}function i(e,n){var t=b(e.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=y[y.length-1];if("top"===e.insertAt)r?r.nextSibling?t.insertBefore(n,r.nextSibling):t.appendChild(n):t.insertBefore(n,t.firstChild),y.push(n);else if("bottom"===e.insertAt)t.appendChild(n);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=b(e.insertInto+" "+e.insertAt.before);t.insertBefore(n,o)}}function a(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var n=y.indexOf(e);n>=0&&y.splice(n,1)}function s(e){var n=document.createElement("style");return e.attrs.type="text/css",l(n,e.attrs),i(e,n),n}function c(e){var n=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",l(n,e.attrs),i(e,n),n}function l(e,n){Object.keys(n).forEach(function(t){e.setAttribute(t,n[t])})}function d(e,n){var t,r,o,i;if(n.transform&&e.css){if(!(i=n.transform(e.css)))return function(){};e.css=i}if(n.singleton){var l=v++;t=g||(g=s(n)),r=f.bind(null,t,l,!1),o=f.bind(null,t,l,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=c(n),r=p.bind(null,t,n),o=function(){a(t),t.href&&URL.revokeObjectURL(t.href)}):(t=s(n),r=u.bind(null,t),o=function(){a(t)});return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else o()}}function f(e,n,t,r){var o=t?"":r.css;if(e.styleSheet)e.styleSheet.cssText=w(n,o);else{var i=document.createTextNode(o),a=e.childNodes;a[n]&&e.removeChild(a[n]),a.length?e.insertBefore(i,a[n]):e.appendChild(i)}}function u(e,n){var t=n.css,r=n.media;if(r&&e.setAttribute("media",r),e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}function p(e,n,t){var r=t.css,o=t.sourceMap,i=void 0===n.convertToAbsoluteUrls&&o;(n.convertToAbsoluteUrls||i)&&(r=x(r)),o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}var m={},h=function(e){var n;return function(){return void 0===n&&(n=e.apply(this,arguments)),n}}(function(){return window&&document&&document.all&&!window.atob}),b=function(e){var n={};return function(t){if(void 0===n[t]){var r=e.call(this,t);if(r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}n[t]=r}return n[t]}}(function(e){return document.querySelector(e)}),g=null,v=0,y=[],x=t(5);e.exports=function(e,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");n=n||{},n.attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||(n.singleton=h()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var t=o(e,n);return r(t,n),function(e){for(var i=[],a=0;a<t.length;a++){var s=t[a],c=m[s.id];c.refs--,i.push(c)}e&&r(o(e,n),n);for(var a=0;a<i.length;a++){var c=i[a];if(0===c.refs){for(var l=0;l<c.parts.length;l++)c.parts[l]();delete m[c.id]}}}};var w=function(){var e=[];return function(n,t){return e[n]=t,e.filter(Boolean).join("\n")}}()},function(e,n){e.exports=function(e){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var t=n.protocol+"//"+n.host,r=t+n.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,n){var o=n.trim().replace(/^"(.*)"$/,function(e,n){return n}).replace(/^'(.*)'$/,function(e,n){return n});if(/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(o))return e;var i;return i=0===o.indexOf("//")?o:0===o.indexOf("/")?t+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")"})}}])})},'./node_modules/css-loader/index.js?{"importLoaders":1}!./node_modules/postcss-loader/lib/index.js!./src/index.css':function(e,n,t){n=e.exports=t("./node_modules/css-loader/lib/css-base.js")(void 0),n.push([e.i,"*,:after,:before{-webkit-box-sizing:border-box;box-sizing:border-box}body,html{margin:0;min-height:100vh;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue;background:#f8fafe}.loading,body,html{display:-webkit-box;display:-ms-flexbox;display:flex;height:100%}.loading{position:fixed;top:0;left:0;width:100%;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background:#fff;z-index:999}.wrapper{-webkit-box-flex:1;-ms-flex:1 0 auto;flex:1 0 auto}.p-l-0px{padding-left:0!important}.p-t-10px{padding-top:10px!important}.m-t-15px{margin-top:15px!important}header{position:relative;padding:40px 0;background-image:linear-gradient(-225deg,#2cd8d5,#6b8dd6 48%,#8e37d7)}header .title{font-size:5em;text-align:center;margin-bottom:12px;color:#fff}header .sub-title{width:100%;font-size:20px;margin-top:0;text-align:center;color:#fff}header .github-items{position:absolute;bottom:0;left:0;width:100%;height:60px;background:#000;background:rgba(0,0,0,.1)}main{padding:20px 0}main .opts{margin-bottom:40px}main .btns,main .postions,main .switchs{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-align:center;-ms-flex-align:center;align-items:center}main .btns{padding:20px 0;margin-top:11.5px;margin-bottom:40px;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:wrap;flex-wrap:wrap}main .btns .btn{width:180px;font-size:22.4px;font-size:1.4rem;border:none;cursor:pointer;outline:none;margin-bottom:38px;color:#fff;-webkit-transition:all .2s ease;transition:all .2s ease}main .btns .btn:hover{-webkit-transform:translateY(-4px);transform:translateY(-4px)}main .btns .btn[data-type=text]{background:#000;background:rgba(0,0,0,.9)}main .btns .btn[data-type=log]{color:#333;background:#fffffc}main .btns .btn[data-type=info]{background:#2ca9e1}main .btns .btn[data-type=success]{background:#38b48b}main .btns .btn[data-type=warn]{background:#f89406}main .btns .btn[data-type=error]{background:#e9546b}",""])},"./node_modules/css-loader/lib/css-base.js":function(e,n){function t(e,n){var t=e[1]||"",o=e[3];if(!o)return t;if(n&&"function"==typeof btoa){var i=r(o);return[t].concat(o.sources.map(function(e){return"/*# sourceURL="+o.sourceRoot+e+" */"})).concat([i]).join("\n")}return[t].join("\n")}function r(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}e.exports=function(e){var n=[];return n.toString=function(){return this.map(function(n){var r=t(n,e);return n[2]?"@media "+n[2]+"{"+r+"}":r}).join("")},n.i=function(e,t){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(t&&!a[2]?a[2]=t:t&&(a[2]="("+a[2]+") and ("+t+")"),n.push(a))}},n}},"./node_modules/style-loader/lib/addStyles.js":function(e,n,t){function r(e,n){for(var t=0;t<e.length;t++){var r=e[t],o=m[r.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](r.parts[i]);for(;i<r.parts.length;i++)o.parts.push(d(r.parts[i],n))}else{for(var a=[],i=0;i<r.parts.length;i++)a.push(d(r.parts[i],n));m[r.id]={id:r.id,refs:1,parts:a}}}}function o(e,n){for(var t=[],r={},o=0;o<e.length;o++){var i=e[o],a=n.base?i[0]+n.base:i[0],s=i[1],c=i[2],l=i[3],d={css:s,media:c,sourceMap:l};r[a]?r[a].parts.push(d):t.push(r[a]={id:a,parts:[d]})}return t}function i(e,n){var t=b(e.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=y[y.length-1];if("top"===e.insertAt)r?r.nextSibling?t.insertBefore(n,r.nextSibling):t.appendChild(n):t.insertBefore(n,t.firstChild),y.push(n);else if("bottom"===e.insertAt)t.appendChild(n);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=b(e.insertInto+" "+e.insertAt.before);t.insertBefore(n,o)}}function a(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var n=y.indexOf(e);n>=0&&y.splice(n,1)}function s(e){var n=document.createElement("style");return e.attrs.type="text/css",l(n,e.attrs),i(e,n),n}function c(e){var n=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",l(n,e.attrs),i(e,n),n}function l(e,n){Object.keys(n).forEach(function(t){e.setAttribute(t,n[t])})}function d(e,n){var t,r,o,i;if(n.transform&&e.css){if(!(i=n.transform(e.css)))return function(){};e.css=i}if(n.singleton){var l=v++;t=g||(g=s(n)),r=f.bind(null,t,l,!1),o=f.bind(null,t,l,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=c(n),r=p.bind(null,t,n),o=function(){a(t),t.href&&URL.revokeObjectURL(t.href)}):(t=s(n),r=u.bind(null,t),o=function(){a(t)});return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else o()}}function f(e,n,t,r){var o=t?"":r.css;if(e.styleSheet)e.styleSheet.cssText=w(n,o);else{var i=document.createTextNode(o),a=e.childNodes;a[n]&&e.removeChild(a[n]),a.length?e.insertBefore(i,a[n]):e.appendChild(i)}}function u(e,n){var t=n.css,r=n.media;if(r&&e.setAttribute("media",r),e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}function p(e,n,t){var r=t.css,o=t.sourceMap,i=void 0===n.convertToAbsoluteUrls&&o;(n.convertToAbsoluteUrls||i)&&(r=x(r)),o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}var m={},h=function(e){var n;return function(){return void 0===n&&(n=e.apply(this,arguments)),n}}(function(){return window&&document&&document.all&&!window.atob}),b=function(e){var n={};return function(t){if(void 0===n[t]){var r=e.call(this,t);if(r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}n[t]=r}return n[t]}}(function(e){return document.querySelector(e)}),g=null,v=0,y=[],x=t("./node_modules/style-loader/lib/urls.js");e.exports=function(e,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");n=n||{},n.attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||(n.singleton=h()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var t=o(e,n);return r(t,n),function(e){for(var i=[],a=0;a<t.length;a++){var s=t[a],c=m[s.id];c.refs--,i.push(c)}if(e){r(o(e,n),n)}for(var a=0;a<i.length;a++){var c=i[a];if(0===c.refs){for(var l=0;l<c.parts.length;l++)c.parts[l]();delete m[c.id]}}}};var w=function(){var e=[];return function(n,t){return e[n]=t,e.filter(Boolean).join("\n")}}()},"./node_modules/style-loader/lib/urls.js":function(e,n){e.exports=function(e){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var t=n.protocol+"//"+n.host,r=t+n.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,n){var o=n.trim().replace(/^"(.*)"$/,function(e,n){return n}).replace(/^'(.*)'$/,function(e,n){return n});if(/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(o))return e;var i;return i=0===o.indexOf("//")?o:0===o.indexOf("/")?t+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")"})}},"./src/index.css":function(e,n,t){var r=t('./node_modules/css-loader/index.js?{"importLoaders":1}!./node_modules/postcss-loader/lib/index.js!./src/index.css');"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0};o.transform=void 0;var i=t("./node_modules/style-loader/lib/addStyles.js")(r,o);r.locals&&(e.exports=r.locals),r.locals||e.hot.accept('./node_modules/css-loader/index.js?{"importLoaders":1}!./node_modules/postcss-loader/lib/index.js!./src/index.css',function(){var n=t('./node_modules/css-loader/index.js?{"importLoaders":1}!./node_modules/postcss-loader/lib/index.js!./src/index.css');"string"==typeof n&&(n=[[e.i,n,""]]),i(n)}),e.hot.dispose(function(){i()})},"./src/index.js":function(e,n,t){"use strict";function r(e){if(Array.isArray(e)){for(var n=0,t=Array(e.length);n<e.length;n++)t[n]=e[n];return t}return Array.from(e)}function o(){alert("clicked.")}function i(){alert("closed.")}t("./src/index.css");var a=t("./dist/tata.js"),s=function(e){return e&&e.__esModule?e:{default:e}}(a);document.addEventListener("readystatechange",function(){if("complete"===document.readyState){var e=document.querySelector(".loading"),n=document.querySelector(".btns");document.querySelectorAll("input");e.remove?e.remove():document.body.removeChild(e),n.addEventListener("click",function(e){var n=e.target,t=n.dataset.type;if(t){var a=document.getElementById("title").value,c=document.getElementById("text").value,l=[].concat(r(document.querySelectorAll("input[name=position]"))).find(function(e){return e.checked}).value;s.default[t](a,c,{duration:1e3*document.getElementById("duration").value,position:l,progress:document.querySelector("input[name=progress]").checked,holding:document.querySelector("input[name=holding]").checked,animate:document.querySelector("input[name=animate]").checked?"slide":"fade",closeBtn:document.querySelector("input[name=closeBtn]").checked,onClick:document.querySelector("input[name=onClick]").checked?o:null,onClose:document.querySelector("input[name=onClose]").checked?i:null})}})}})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,